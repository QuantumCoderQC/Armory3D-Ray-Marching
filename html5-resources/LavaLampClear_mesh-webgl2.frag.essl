#version 300 es
precision mediump float;
precision highp int;

const vec3 _105[3] = vec3[](vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0));
const float _118[3] = float[](0.0, 1.0, 1.0);

in highp vec3 wnormal;
in highp vec3 wposition;
out highp vec4 fragColor[4];

highp vec2 octahedronWrap(highp vec2 v)
{
    return (vec2(1.0) - abs(v.yx)) * vec2((v.x >= 0.0) ? 1.0 : (-1.0), (v.y >= 0.0) ? 1.0 : (-1.0));
}

highp float packFloatInt16(highp float f, uint i)
{
    uint bitsInt = i << 12u;
    uint bitsFloat = uint(f * 4095.0);
    return float(bitsInt | bitsFloat);
}

highp float packFloat2(highp float f1, highp float f2)
{
    return floor(f1 * 255.0) + min(f2, 0.9900000095367431640625);
}

void main()
{
    highp vec3 n = normalize(wnormal);
    highp vec3 Geometry_Position_res = wposition;
    Geometry_Position_res = Geometry_Position_res;
    highp float SeparateXYZ_Z_res = Geometry_Position_res.z;
    highp float Math_001_Value_res = SeparateXYZ_Z_res + 2.2999999523162841796875;
    highp float Math_Value_res = Math_001_Value_res / 8.0;
    highp float ColorRamp_fac = Math_Value_res;
    int ColorRamp_i = 0 + int(ColorRamp_fac > 1.0);
    highp vec3 ColorRamp_Color_res = mix(_105[ColorRamp_i], _105[ColorRamp_i + 1], vec3(max((ColorRamp_fac - _118[ColorRamp_i]) * (1.0 / (_118[ColorRamp_i + 1] - _118[ColorRamp_i])), 0.0)));
    highp vec3 basecol = ColorRamp_Color_res;
    highp float roughness = 0.5;
    highp float metallic = 0.0;
    highp float occlusion = 1.0;
    highp float specular = 0.5;
    highp vec3 emissionCol = vec3(0.0);
    highp float opacity = 0.4997999966144561767578125;
    if (opacity < 0.99989998340606689453125)
    {
        discard;
    }
    n /= vec3((abs(n.x) + abs(n.y)) + abs(n.z));
    highp vec2 _175;
    if (n.z >= 0.0)
    {
        _175 = n.xy;
    }
    else
    {
        _175 = octahedronWrap(n.xy);
    }
    n = vec3(_175.x, _175.y, n.z);
    fragColor[0] = vec4(n.xy, roughness, packFloatInt16(metallic, 0u));
    fragColor[1] = vec4(basecol, packFloat2(occlusion, specular));
    fragColor[3] = vec4(emissionCol, 0.0);
}

